name: Fetch TMDb Top Rated

permissions:
  contents: write

on:
  schedule:
    - cron: '0 4 * * *'      # daily at 4 AM UTC
  workflow_dispatch: {}

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # === THIS IS THE NEW, MORE POWERFUL DIAGNOSTIC STEP ===
      - name: Diagnose Watch Providers API Call
        run: |
          echo "--- Testing Watch Providers for a single movie (ID 238) ---"
          
          # We will try to get the providers for "The Godfather"
          raw_output=$(curl -s "https://api.themoviedb.org/3/movie/238/watch/providers?api_key=${{ secrets.TMDB_API_KEY }}")
          
          echo "Raw output from TMDb:"
          echo "$raw_output"
          
          # Now let's see what jq does with that output
          providers_output=$(echo "$raw_output" | jq -c '[ .results.US.flatrate?[], .results.US.free?[], .results.US.adSupported?[] ] | flatten')
          
          echo "Processed providers by jq:"
          echo "$providers_output"
          
          echo "Length of providers array:"
          echo "$providers_output" | jq 'length'

          echo "--- End of Test ---"
      # === END OF DIAGNOSTIC STEP ===

      # The rest of the workflow is here but will likely fail if the key is bad.
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Fetch top-rated movies (pages 1â€“40)
        run: |
          mkdir -p data
          for page in {1..40}; do
            curl -s "https://api.themoviedb.org/3/movie/top_rated?api_key=${{ secrets.TMDB_API_KEY }}&language=en-US&page=$page" \
              | jq '.results' > data/page${page}.json
          done

      - name: Combine into single list
        run: |
          jq -s 'flatten' data/page*.json > data/all_movies.json

      - name: Enrich and filter for streamable movies
        run: |
          jq -c '.[]' data/all_movies.json | \
          while read -r movie; do
            id=$(jq -r '.id' <<<"$movie")
            raw=$(curl -s "https://api.themoviedb.org/3/movie/${id}/watch/providers?api_key=${{ secrets.TMDB_API_KEY }}")
            link=$(jq -r '.results.US.link // empty' <<<"$raw")
            providers=$(jq -c '[ .results.US.flatrate?[], .results.US.free?[], .results.US.adSupported?[] ] | flatten')
            if [[ $(jq 'length' <<<"$providers") -gt 0 ]]; then
              echo "$movie" | jq --arg link "$link" '. + { watch_link: $link }'
            fi
          done | jq -s '.' > data/movies.json

      - name: Create final movie files
        run: |
          jq '.[0:800]' data/movies.json > data/movies.json.tmp && mv data/movies.json.tmp data/movies.json
          jq '[.[] | {id, title, release_date, poster_path, genre_ids, watch_link}]' data/movies.json > data/movies.json.tmp && mv data/movies.json.tmp data/movies.json
          jq -c '.[]' data/movies.json | shuf | head -n 10 | jq -s '.' > data/daily-pool.json

      - name: Commit updated movie files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/movies.json data/daily-pool.json
          git commit -m "chore: update TMDb movie caches" || echo "No changes"
          git push
